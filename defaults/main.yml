---

# By default, PowerDNS is installed from the os default repositories.
pdns_install_repo: ""

# Install the EPEL repository.
# EPEL is needed to satisfy some PowerDNS dependencies like protobuf
pdns_install_epel: True

# You can install the PowerDNS packages from the 'master' branch as
# follows:
# - hosts: all
#   roles:
#    - { role: PowerDNS.pdns,
#        pdns_install_repo: "{{ pdns_auth_powerdns_repo_master }}"
#
# To install the PowerDNS package from the '40' branch of
# the PowerDNS official repository use the following playbook
# - hosts: all
#   roles:
#    - { role: PowerDNS.pdns,
#        pdns_install_repo: "{{ pdns_auth_powerdns_repo_40 }}"
#
# To install the PowerDNS Recursor package from a custom repository
# override the `pdns_install_repo` default value in your playbook.
# e.g.
# - hosts: all
#   vars:
#     pdns_install_repo:
#       apt_repo_origin: "my.repo.com"  # used to pin the pdns to the provided repository
#       apt_repo: "deb http://my.repo.com/{{ ansible_distribution | lower }} {{ ansible_distribution_release | lower }}/pdns main"
#       gpg_key: "http://my.repo.com/MYREPOGPGPUBKEY.asc" # repository public GPG key
#       gpg_key_id: "MYREPOGPGPUBKEYID" # to avoid to reimport the key each time the role is executed
#       yum_repo_baseurl: "http://my.repo.com/centos/$basearch/$releasever/pdns"
#       yum_repo_name: "powerdns"       # used to select only the pdns packages coming from this repo
#   roles:
#    - { role: PowerDNS.pdns }

# The user and group to run as.
# NOTE: at the moment, we don't create a user as we assume the package creates
# a "pdns" user and group. If you change these variables, make sure to create
# the user and groups before applying this role
pdns_user: pdns
pdns_group: pdns

# PowerDNS configuration files and directories 
pdns_config_dir: "{{ default_pdns_backends_dict }}"
pdns_config_file: "pdns.conf"

# Dictionary of packages that should be installed to enable the backends.
# backendname: packagename
pdns_backends_dict: {{ default_pdns_backends_dict }}

# pdns_config: A dict containing all configuration options, except for backend
# configuration and the "config-dir", "setuid" and "setgid" directives.
# NOTE: Right now, we don't verify the options when configuring the server.
#
# Example:
# pdns_config:
#  master: yes
#  slave: no
#  local-address: '192.0.2.53'
#  local-ipv6: '2001:DB8:1::53'
#  local-port: '5300'
pdns_config: {}

# pdns_backends: A dict with all the backends you'd like to have. You can use
# the multiple backends of the same kind by using {backend}:{instance_name}.
#
# For example:
# pdns_backends:
#   'gmysql:one':
#     'user': root
#     'host': 127.0.0.1
#     'password': root
#     'dbname': pdns
#   'gmysql:two':
#     'user': pdns_user
#     'host': 192.0.2.15
#     'password': my_password
#     'dbname': dns
#   'bind':
#     'config': '/etc/named/named.conf'
#     'hybrid':  yes
#     'dnssec-db': '{{ pdns_config_dir }}/dnssec.db'
#
# This default starts just the bind-backend with an empty config file
pdns_backends:
  bind:
    config: '/dev/null'

# MySQL credential to create database per backend
# You must put only gmysql backend
#
# For example:
# pdns_backends_mysql_credential:
#   'gmysql:one':
#     'priv_user': root
#     'priv_password': my_first_password
#     'priv_host':
#       - "localhost"
#       - "%"
#   'gmysql:two':
#     'priv_user': someprivuser
#     'priv_password': my_second_password
#     'priv_host':
#       - "localhost"

# Full path to mysql schema file
pdns_mysql_debian_schema_file:
  os: /usr/share/dbconfig-common/data/pdns-backend-mysql/install/mysql
  powerdns: /usr/share/doc/pdns-backend-mysql/schema.mysql.sql

# Dependencies to initial mysql database
pdns_debian_mysql_dependencies:
  - python-mysqldb
  - mysql-client
pdns_rhel_mysql_dependencies:
  - MySQL-python
  - mysql
